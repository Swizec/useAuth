import{auth as i}from"firebaseui";import t from"firebase/app";import"firebase/auth";function e(){return(e=Object.assign||function(i){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&(i[s]=e[s])}return i}).apply(this,arguments)}class s{constructor(e){if(this.dispatch=e.dispatch,this.signInOptions=e.signInOptions,e.firebaseConfig)this.firebase=t.initializeApp(e.firebaseConfig,"useAuth");else{if(!e.firebaseApp)throw"Please provide firebaseConfig or initialized firebaseApp";this.firebase=e.firebaseApp}this.ui=new i.AuthUI(this.firebase.auth()),this.firebase.auth().onAuthStateChanged(this.onAuthStateChanged.bind(this))}onAuthStateChanged(i){i&&(this.dispatch("LOGIN"),this.dispatch("AUTHENTICATED",{user:this.firebase.auth().currentUser,authResult:{expiresIn:3600}}))}static addDefaultParams(i,s){return e({signInOptions:[t.auth.EmailAuthProvider.PROVIDER_ID]},i)}authorize(){this.dispatch("LOGIN"),this.ui.start("#firebaseui-auth-container",{signInOptions:this.signInOptions,signInFlow:"popup",callbacks:{signInSuccessWithAuthResult:i=>(this.dispatch("AUTHENTICATED",{user:this.firebase.auth().currentUser,authResult:e({},i,{expiresIn:3600})}),!1)}})}signup(){}logout(i){this.firebase.auth().signOut()}userId(i){var t;return null==(t=this.firebase.auth().currentUser)?void 0:t.uid}userRoles(i){return[]}async handleLoginCallback(){return!1}async checkSession(){const i=this.firebase.auth().currentUser;if(i)return await i.reload(),{user:i,authResult:{expiresIn:3600}};throw new Error("Session invalid")}}export{s as FirebaseUI};
//# sourceMappingURL=FirebaseUI.modern.js.map
